{
	"info": {
		"_postman_id": "7a8aa6c4-a5e0-44a3-b0ca-bb9113cc6fab",
		"name": "Vks_HW#2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login_token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Vasya",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}login",
					"host": [
						"{{URL}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test#2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Validation JSON Schema', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let jsonData = pm.response.json();\r",
							"let salary0_5 = jsonData.qa_salary_after_6_months\r",
							"let salary1 = jsonData.qa_salary_after_12_months\r",
							"let salary = jsonData.start_qa_salary\r",
							"pm.test(\"Check_salary0_5_multiply\", function () {\r",
							"    pm.expect(salary0_5).to.eql(salary * 2);\r",
							"});\r",
							"pm.test(\"Check_salary1_multiply\", function () {\r",
							"    pm.expect(salary1).to.eql(salary * 2.9);\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"let jsonSalary = pm.response.json().person;\r",
							"    pm.environment.set(\"salary1_5\", jsonSalary.u_salary_1_5_year);\r",
							"\r",
							"pm.test(\"Check_salary1_multiply\", function () {\r",
							"    pm.expect(jsonSalary.u_salary_1_5_year).to.eql(salary * 4);\r",
							"});\r",
							"//pm.environment.set(\"salary_after_1_5_year\", pm.response.json().person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : 55,\r\n    \"salary\": 1000,\r\n    \"name\": \"Vasya\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}user_info",
					"host": [
						"{{URL}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test#3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let jsonData = pm.response.json();\r",
							"let salary = jsonData.salary[0]\r",
							"let salary_1 = +jsonData.salary[1]\r",
							"let salary_2 = +jsonData.salary[2]\r",
							"\r",
							"pm.test(\"Check_salary_multiply_sal_0\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary);\r",
							"\r",
							"});\r",
							"pm.test(\"Check_salary_multiply_sal_1\", function () {\r",
							"    pm.expect(salary_1).to.eql(salary * 2);\r",
							"});\r",
							"pm.test(\"Check_salary_multiply_sal_2\", function () {\r",
							"    pm.expect(salary_2).to.eql(salary * 3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(salary_1).to.lessThan(salary_2)&&pm.expect(salary).to.lessThan(salary_2)\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Validation JSON Schema', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"test 2nd element above zero in array\", function () {\r",
							"//     pm.expect(Number(jsonData.salary[2])).to.be.above(jsonData.salary[0]);\r",
							"// });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "55"
						},
						{
							"key": "salary",
							"value": "1000"
						},
						{
							"key": "name",
							"value": "Vasya"
						},
						{
							"key": "auth_token",
							"value": "{{token}}"
						}
					]
				},
				"url": {
					"raw": "{{URL}}new_data",
					"host": [
						"{{URL}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test#4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Validation JSON Schema', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"    // 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let daily_food = jsonData.daily_food\r",
							"let weight = request.data.weight\r",
							"pm.test(\"Check_daily_food_multiply\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(weight * 0.012)\r",
							"});\r",
							"let daily_sleep = jsonData.daily_sleep\r",
							"\r",
							"pm.test(\"Check_daily_sleep_multiply\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(weight * 2.5)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "55"
						},
						{
							"key": "weight",
							"value": "2",
							"contentType": ""
						},
						{
							"key": "name",
							"value": "Python"
						},
						{
							"key": "auth_token",
							"value": "{{token}}"
						}
					]
				},
				"url": {
					"raw": "{{URL}}test_pet_info",
					"host": [
						"{{URL}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test#5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Validation JSON Schema', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name\r",
							"let req_name = request.data.name\r",
							"pm.test (\"Comparing objects\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name)\r",
							"});\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"let resp_age = jsonData.age\r",
							"let req_age = request.data.age\r",
							"pm.test (\"Comparing objects\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "55"
						},
						{
							"key": "salary",
							"value": "{{salary1_5}}"
						},
						{
							"key": "name",
							"value": "Vasya"
						},
						{
							"key": "auth_token",
							"value": "{{token}}"
						}
					]
				},
				"url": {
					"raw": "{{URL}}get_test_user",
					"host": [
						"{{URL}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test#6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"let jsonData = pm.response.json();\r",
							"let randomValue = jsonData[Math.floor(Math.random() * jsonData.length)];\r",
							"console.log(randomValue, jsonData[randomValue]);\r",
							"\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"pm.environment.set(\"Cur_ID\", randomValue.Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}currency",
					"host": [
						"{{URL}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test#7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"//   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Validation JSON Schema', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}curr_byn?auth_token={{token}}&Cur_ID={{Cur_ID}}",
					"host": [
						"{{URL}}curr_byn"
					],
					"query": [
						{
							"key": "auth_token",
							"value": "{{token}}"
						},
						{
							"key": "Cur_ID",
							"value": "{{Cur_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test#8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 1) получить список валют\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// console.log(randomValue, jsonData[randomValue]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}currency",
					"host": [
						"{{URL}}currency"
					]
				}
			},
			"response": []
		}
	]
}